name: Deploy to ECS Fargate

on:
  push:
    branches:
      - master

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: wisecow
  ECR_REGISTRY: 486991249421.dkr.ecr.eu-north-1.amazonaws.com
  IMAGE_TAG: ${{ github.run_number }}
  S3_BUCKET: wisecow-trivy-reports

jobs:
  build-scan-approve-deploy:
    runs-on: ubuntu-latest
    environment:
      name: production  

    steps:

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cache Trivy Binary
        id: cache-trivy
        uses: actions/cache@v3
        with:
          path: trivy
          key: trivy-cache-${{ runner.os }}

      - name: Install Trivy (if not cached)
        if: steps.cache-trivy.outputs.cache-hit != 'true'
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          mkdir -p trivy
          mv ./bin/trivy trivy/trivy

      - name: Build Docker Image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Trivy Scan Docker Image
        run: |
          trivy/trivy image \
            --timeout 5m \
            --format json \
            -o trivy-report.json \
            $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Upload Trivy Report to S3
        run: |
          aws s3 cp trivy-report.json s3://$S3_BUCKET/trivy-report-${IMAGE_TAG}.json

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Push to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster wisecow-cluster \
            --service wisecow-service \
            --force-new-deployment \
            --region $AWS_REGION

